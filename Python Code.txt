import socket
import threading

def handle_client(client_socket, client_address):
    print(f"Accepted connection from {client_address}")
    while True:
        try:
            message = client_socket.recv(1024).decode()
            if not message:
                print(f"Connection with {client_address} closed.")
                break
            print(f"Received message from {client_address}: {message}")
            # Broadcast message to all clients
            broadcast(message)
        except Exception as e:
            print(f"Error handling client {client_address}: {str(e)}")
            break
    client_socket.close()

def broadcast(message):
    for client in clients:
        try:
            client.send(message.encode())
        except:
            clients.remove(client)

def start_server():
    global clients
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind(('0.0.0.0', 9999))  # Change the IP and port as needed
    server_socket.listen(5)
    print("Server started. Waiting for connections...")
    clients = []

    while True:
        client_socket, client_address = server_socket.accept()
        clients.append(client_socket)
        client_handler = threading.Thread(target=handle_client, args=(client_socket, client_address))
        client_handler.start()

if __name__ == "__main__":
    start_server()
